variables:
  DOCKER_DRIVER: overlay2
  KERNEL: "bzImage"
  ROOTFS_NAME: "stretch.img"
  ROOTFS_IMAGE_URL: "https://gitlab.steamos.cloud/api/v4/projects/kernel-research%2Frootfs/jobs/129183/artifacts"
  GIT_AUTHOR_NAME: "Gitlab-ci"
  GIT_AUTHOR_EMAIL: "gitlab@gitlab.steamos.cloud"

default:
  artifacts:
    expire_in: 1 week
    when: always
  interruptible: true
  tags:
    - autoscaled

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
  auto_cancel:
    on_new_commit: interruptible

stages:
  - check-image
  - build-image
  - build-kernel
  - test-kernel

.check-docker-image:
  stage: check-image
  image:
    name: gcr.io/go-containerregistry/crane/debug:v0.15.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Checking $IMAGE_NAME:$IMAGE_TAG"
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane manifest $CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG

.build-docker-image:
  stage: build-image
  image:
    name: gcr.io/kaniko-project/executor:v1.21.0-debug
    entrypoint: [""]
  dependencies: []
  script:
    - mkdir -p /kaniko/.docker/
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR/ci/$IMAGE_DISTRO_BASE
      --dockerfile $CI_PROJECT_DIR/ci/$IMAGE_DISTRO_BASE/Dockerfile
      --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG
      --single-snapshot
      --build-arg DISTRO_BASE=$IMAGE_DISTRO_BASE
      --build-arg DISTRO_TAG=$IMAGE_DISTRO_TAG
  when: on_failure

.use-docker-image:
  image:
    name: $CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG
    entrypoint: [""]

.prep-debian-kernel-builder:
  variables:
    IMAGE_DISTRO_BASE: debian
    IMAGE_DISTRO_TAG: buster-slim
    IMAGE_NAME: debian-kernel-builder
    IMAGE_TAG: "2024-02-29"

check-debian-kernel-builder:
  extends:
    - .check-docker-image
    - .prep-debian-kernel-builder

build-debian-kernel-builder:
  extends:
    - .build-docker-image
    - .prep-debian-kernel-builder
  needs:
    - check-debian-kernel-builder

.use-debian-kernel-builder:
  extends:
    - .use-docker-image
    - .prep-debian-kernel-builder

build-kernel-neptune:
  stage: build-kernel
  extends:
    - .use-debian-kernel-builder
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH !~ /-integration$/
      when: manual
      allow_failure: true
    - when: on_success
  variables:
    BUILD_DIR: build/neptune
  script:
    - mkdir -p $BUILD_DIR
    # Prepare kernel config
    - |
      ./scripts/kconfig/merge_config.sh -m -O $BUILD_DIR \
        ci/kernel-config/neptune/config \
        ci/kernel-config/neptune/config-neptune
    - make O=$BUILD_DIR olddefconfig
    - cp $BUILD_DIR/.config kernel_config_neptune
    # Build kernel
    - make O=$BUILD_DIR -j $(nproc)
    - strip -v --strip-debug $BUILD_DIR/vmlinux
    - ZSTD_CLEVEL=19 make O=$BUILD_DIR -j $(nproc) INSTALL_MOD_STRIP=1 tar-pkg
    - mv $BUILD_DIR/linux-*.tar .
  artifacts:
    paths:
      - kernel_config_neptune
      - linux-*.tar

build-kernel-qemu:
  stage: build-kernel
  extends:
    - .use-debian-kernel-builder
  script:
    # Prepare the firmware files to be included in the kernel image
    - tar -xf ci/fw.tar.zst -C ci
    - FW_FILES=$(find ci/fw -type f -printf '%P ')
    - |
      printf "%s\n" \
        "CONFIG_EXTRA_FIRMWARE_DIR=\"ci/fw\"" \
        "CONFIG_EXTRA_FIRMWARE=\"${FW_FILES}\"" \
         >ci/kernel-config/qemu/config-fragment-firmware
    # Prepare kernel config
    - make x86_64_defconfig && make kvm_guest.config
    - |
      ./scripts/kconfig/merge_config.sh -m .config \
        ci/kernel-config/qemu/config-fragment \
        ci/kernel-config/qemu/config-fragment-extra \
        ci/kernel-config/qemu/config-fragment-firmware
    - cp .config kernel_config
    # Build kernel
    - make -j $(nproc)
    - git rev-parse HEAD &> commit_id_file
    - cp -v arch/x86/boot/bzImage .
  artifacts:
    paths:
      - bzImage
      - kernel_config

test-kernel-qemu:
  stage: test-kernel
  extends:
    - .use-debian-kernel-builder
  needs:
    - build-kernel-qemu
  rules:
    - if: $CI_COMMIT_TAG == null
      when: manual
      allow_failure: true
    - when: on_success
  script:
    # Download rootfs
    - 'curl -L --header "PRIVATE-TOKEN: ${KERNEL_RESEARCH_ROOTFS_TOKEN}" "${ROOTFS_IMAGE_URL}" --output artifact.zip'
    - unzip artifact.zip
    - cp ci/kernel_test.sh .
    # Start QEMU
    - |
      qemu-system-x86_64 -enable-kvm -nographic -kernel ${KERNEL} \
        -drive file=${ROOTFS_NAME},format=raw -device virtio-serial-pci \
        -virtfs local,path=$(pwd),mount_tag=steamlogs,security_model=none \
        -m 2G -smp $(nproc --ignore=1) -cpu host \
        -net user,hostfwd=tcp::2222-:22 -net nic,model=virtio \
        --append "root=/dev/sda rw console=ttyS0" &
    - QEMU_PID=$!
    - echo "Started QEMU, pid=$QEMU_PID"
    # Dump kernel test results
    - touch kernel_results.log
    - tail --pid=$QEMU_PID -n +1 -f kernel_results.log
    # Notify
    - test -f "fail.txt" && exit 1
    - echo "All tests passed."
  artifacts:
    paths:
      - kernel_results.log
