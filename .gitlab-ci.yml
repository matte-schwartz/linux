variables:
  DOCKER_DRIVER: overlay2
  KERNEL: "bzImage"
  LINUX_FIRMWARE_URL: "https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git"
  LINUX_FIRMWARE_DL_DIR: "dl/linux-firmware"
  ROOTFS_NAME: "stretch.img"
  ROOTFS_IMAGE_URL: "https://gitlab.steamos.cloud/api/v4/projects/kernel-research%2Frootfs/jobs/129183/artifacts"
  GIT_AUTHOR_NAME: "Gitlab-ci"
  GIT_AUTHOR_EMAIL: "gitlab@gitlab.steamos.cloud"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

stages:
  - docker-image
  - kernel-build

.build-docker-image:
  image:
    name: gcr.io/kaniko-project/executor:v1.21.0-debug
    entrypoint: [""]
  stage: docker-image
  only:
    - branches
  script:
    - mkdir -p /kaniko/.docker/
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR/ci/$IMAGE_DISTRO_BASE
      --dockerfile $CI_PROJECT_DIR/ci/$IMAGE_DISTRO_BASE/Dockerfile
      --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG
      --single-snapshot
      --build-arg DISTRO_BASE=$IMAGE_DISTRO_BASE
      --build-arg DISTRO_TAG=$IMAGE_DISTRO_TAG

.use-docker-image:
  image:
    name: $CI_REGISTRY_IMAGE/$IMAGE_NAME:$IMAGE_TAG
    entrypoint: [""]

.prep-debian-kernel-builder:
  variables:
    IMAGE_DISTRO_BASE: debian
    IMAGE_DISTRO_TAG: buster-slim
    IMAGE_NAME: debian-kernel-builder
    IMAGE_TAG: "2024-02-29"
  tags:
    - autoscaled

build-debian-kernel-builder:
  extends:
    - .build-docker-image
    - .prep-debian-kernel-builder

.use-debian-kernel-builder:
  extends:
    - .use-docker-image
    - .prep-debian-kernel-builder
  needs:
    - build-debian-kernel-builder
  stage: kernel-build

build-kernel-test-qemu:
  extends:
    - .use-debian-kernel-builder
  script:
    # Prepare the firmware files to be included in the kernel image
    - git clone --depth=1 ${LINUX_FIRMWARE_URL} ${LINUX_FIRMWARE_DL_DIR}
    - |
      FW_FILES="amdgpu/vangogh_asd.bin amdgpu/vangogh_ce.bin amdgpu/vangogh_dmcub.bin amdgpu/vangogh_me.bin amdgpu/vangogh_mec2.bin amdgpu/vangogh_mec.bin amdgpu/vangogh_pfp.bin amdgpu/vangogh_rlc.bin amdgpu/vangogh_sdma.bin amdgpu/vangogh_toc.bin amdgpu/vangogh_vcn.bin" &&
      FW_FILES="${FW_FILES} rtw88/rtw8822c_fw.bin rtw88/rtw8822c_wow_fw.bin" &&
      FW_FILES="${FW_FILES} rtl_bt/rtl8822cu_fw.bin rtl_bt/rtl8822cu_config.bin" &&
      FW_FILES="${FW_FILES} cirrus/cs35l41-dsp1-spk-prot.wmfw cirrus/cs35l41-dsp1-spk-prot.bin" &&
      printf "%s\n" \
        "CONFIG_EXTRA_FIRMWARE_DIR=\"${LINUX_FIRMWARE_DL_DIR}\"" \
        "CONFIG_EXTRA_FIRMWARE=\"${FW_FILES}\"" &> .config-fragment-firmware
    # Prepare kernel config
    - make x86_64_defconfig && make kvm_guest.config
    - ./scripts/kconfig/merge_config.sh .config ci/.config-fragment ci/.config-fragment-extra .config-fragment-firmware
    - cp .config kernel_config
    # Build kernel
    - make -j $(nproc)
    - git rev-parse HEAD &> commit_id_file
    - cp -v arch/x86/boot/bzImage .
    # Download rootfs
    - 'curl -L --header "PRIVATE-TOKEN: ${KERNEL_RESEARCH_ROOTFS_TOKEN}" "${ROOTFS_IMAGE_URL}" --output artifact.zip'
    - unzip artifact.zip
    - cp ci/kernel_test.sh .
    # Start QEMU
    - qemu-system-x86_64 -enable-kvm -nographic -kernel ${KERNEL} -drive file=${ROOTFS_NAME},format=raw -device virtio-serial-pci -virtfs local,path=$(pwd),mount_tag=steamlogs,security_model=none -m 2G -smp $(nproc --ignore=1) -cpu host -net user,hostfwd=tcp::2222-:22 -net nic,model=virtio --append "root=/dev/sda rw console=ttyS0" &
    - QEMU_PID=$!
    - echo "QEMU pid is $QEMU_PID"
    # Dump kernel test results
    - touch kernel_results.log
    - tail --pid=$QEMU_PID -n +1 -f kernel_results.log
    # Notify
    - test -f "fail.txt" && exit 1
    - echo "All tests passed."
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - bzImage
      - kernel_config
      - kernel_results.log
